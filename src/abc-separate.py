#! /usr/bin/python

# separate out all the components with at least 2 samples into their
# own .bin files
# 
# input is a json file output by abc-parse
# output is bin files where the json file says to put them

import argparse
import json
import sys
import subprocess
import os
from typing import Any, Optional

parser = argparse.ArgumentParser(prog="abc-separate"
        , description="Separate components out of an Alembic .abc file"
        , epilog = "Use abc-parse to generate the json file.")

parser.add_argument('filename', help = 'Path to a json file that describes the alembic file (generated by abc-parse)')
parser.add_argument('-v', '--verbose', action = 'store_true')
parser.add_argument('-t', '--type', help = 'Only export this type (default: export all numeric types')

def export_component(abcfile: str, component: dict[str, Any], verbose: bool) -> bool:
    exepath = os.path.dirname(__file__) + "/abc-separate"
    args = [ exepath ]
    if verbose:
        args.append("-v")
    args.append(abcfile)
    args.append(component['path'])
    args.append(component['bin'])
    if verbose:
        print("Running " + " ".join(args))
    result = subprocess.run(args)
    return result.returncode == 0


def main(filename: str, types: Optional[list[str]], verbose: bool) -> bool:
    if not types:
        types = [ 'bool_t', 'uint8_t', 'int8_t', 'uint16_t', 'int16_t', 'uint32_t', 'int32_t', 'uint64_t', 'int64_t', 'float16_t', 'float32_t', 'float64_t' ]

    with open(filename) as f:
        metadata = json.load(f)

    try:
        abcfile = metadata['abc']
        if not isinstance(abcfile, str):
            raise TypeError
    except:
        print (f"alembic file not specified in {filename}")
        return False

    try:
        components = metadata['components']
        if not isinstance(components, list):
            raise TypeError
    except:
        print(f"no components listed in {filename}")
        return False

    # From now on, we blindly assume that the components follow the schema.
    for component in components:
        if component['type'] not in types: 
            path = component['path']
            if verbose: print(f"Not exporting {path}")
            continue
        export_component(abcfile, component, verbose)
    return True

if __name__ == '__main__':
    args = parser.parse_args()
    ok = main(args.filename, [ args.type ] if args.type else None, args.verbose)
    if ok: sys.exit(0)
    else: sys.exit(1)
